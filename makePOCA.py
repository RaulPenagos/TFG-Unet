"""
This script implements the POCA algorithm for data produced using 
the dataAnalysis.py and trackReconstruction.py scripts included
in the PROTECT software.

This script defines functions to get the POCA image out of several
trackReconstruction.root files containing a events TTree with the
tracks of scattered particles.

Function:
    poca

Classes:
    FolderAnalyzer
    RootTrackReader

Runs on Linux and Windows.
    
@author Ra√∫l Penagos
@date   Fri May 9th, 2025
"""
import sys, optparse, os
import ROOT as r
import numpy as np
import matplotlib.pyplot as plt
import re  # regex for extracting index from names 


def poca(xa, va, xb, vb):
    """
                    "Point of Closest Approach"
    Given two 3D-space lines a & b, defined by a point (x) and vector (v) 
    Finds the POCA and returns True and its value as a list [x,y,z]
    In case the two lines are parallel, it returns False and [0,0,0]
    Uses an algorithm developed by Raul, to find the closest point between 
    two lines, the distance between them is minimized.
    Args:
        xa: one point of the a line
        va: direction vector of the a line
        xb: one point of the b line
        vb: direction vector of the b line
    """
    d = xa - xb

    A = np.dot(d , va)
    B = np.dot(va, va) 
    C = np.dot(va, vb)
    D = np.dot(d , vb) 
    E = np.dot(vb, vb)

    denominator = B*E - C**2

    # In case the two lines are close to parallel
    if abs(denominator) < 10^-6:
        return False, [0,0,0]

    alpha = (D*C - A*E) / denominator 
    beta =  (D*B - A*C) / denominator

    P_a = xa + alpha * va
    P_b = xb + beta * vb

    POCA = (P_a + P_b)/2

    return True, [POCA[0],POCA[1],POCA[2]]


class FolderAnalyzer():
    """
    Takes all the .root files from a given directory, several Track.root,
    And generates POCA Images.
    Args:
        input_dir   Directory containing Tracks.root
        output_dir  Goal directory for .png POCA images
    """
    def __init__(self, input_dir: str, output_dir: str, params: dict):
        """
        Generator of the class, saves the input and output directories and 
        fixes a dictionary with the parameters for the created images.
        Args:
            input_dir: path containing root track files
            output_dir: path to the directory where POCA images will be saved
            params: dictionary with parameters
                px = number of pixels by side
                width_cm = scaled width to cover in the image
                height_cm = scaled height to cover in the image
                bins = number of bins by side
        """
        self.input_dir = input_dir 
        self.output_dir = output_dir

        # Dictionary with parameters
        self.params = params

    def make_analysis(self):
        """
        Function will go over all the files in the 'input_dir' and will run RootTrackReader,
        creating output POCA images in the 'output_dir'.
        """
        # Get all the files in the directory
        track_files = os.listdir(self.input_dir)
        
        # Loops over all the .root files, reads the tracks, calculates POCA and makes POCA histograms. 
        for file in track_files:
            if '.root' in file:
                tracks = RootTrackReader(self.input_dir + '/' + file, self.params, self.output_dir)
                tracks.loop()
                tracks.draw_poca()
            
            

class RootTrackReader():
    """
    Reads opne TrackReconstruction.root file generated by PROTECT dataAnalysis tools
    and generates a POCA Image.
    """
    def __init__(self, inputfile: str, params: dict, output_path: str):
        """
        Constructor of the RootTrackReader class.
        Args:
            inputfile: name of the input root file, containing a ttree event with Tracks 
            params: dictionary with parameters
                px = number of pixels by side
                width_cm = scaled width to cover in the image
                height_cm = scaled height to cover in the image
                bins = number of bins by side
            output_path: directory where the image will be stored.
        """
        
        # Open the input track ROOT file 
        try:
            self.input = r.TFile(inputfile)
        except:
            print('Cannot open input file')
            sys.exit()

        # Get the ttree from the opened file
        self.tree = self.input.events

        # Save the parameters
        self.params = params 

        # Create the name for the output histogram image
        self.output_full_path = output_path + '/POCA_' + self.extract_index(inputfile)

        # Variables to store the POCA point's coordinates
        self.x = np.array([])
        self.y = np.array([])
        # self.z = np.array([])

    def extract_index(self, name: str):
        """
        Returns the integer number contained in name if any. Else, 0.
        Input:
            name: string where a number wants to be finded
        """
        match = re.search(r'\d+', name)
        if match:
            return(match.group())
        else:
            return(0) 
        
    def loop(self):
        """
        Loop() funtion will run the POCA algorithm and store the
        x,y,z POCA values for every event in the track file.
        """

        #  Iterates over all items in the events TTree 

        for ev in self.input.events:    
            x1 = np.asarray([ev.x1, ev.y1, ev.z1])
            x2 = np.asarray([ev.x2, ev.y2, ev.z2])
            vx1 = np.asarray([ev.vx1, ev.vy1, ev.vz1])
            vx2 = np.asarray([ev.vx2, ev.vy2, ev.vz2])
            valid = False

            if True in np.isnan(vx1) or True in np.isnan(vx2):
                continue

            # Runs the POCA algorithm
            valid, poca_xyz = poca(x1,vx1,x2,vx2)

            if not valid:
                print("Not Valid!")
                continue

            # Stores the necessary POCA point coordinates
            self.x = np.append(self.x, poca_xyz[0])
            self.y = np.append(self.y, poca_xyz[1])
            # self.z = np.append(self.z, poca_xyz[2])
    
    def draw_poca(self):
        """
        Generates and saves a POCA histogram in the output directory, using
        the self.params parameters for the plot.
        """
        
        # Extract parameters from the dictionary
        px = self.params['px'] / 100
        nbins = self.params['bins']
        ranx_cm = self.params['width_cm'] / 2
        rany_cm = self.params['height_cm'] / 2

        if self.x and self.y:

            # Figsize size in inch, dpi = dots per inch, 
            plt.figure(figsize=(px, px), dpi = 100) 

            # Histogram with nbins, and plotting the range of x,y specified
            plt.hist2d(self.x, self.y, bins=(nbins, nbins), cmap="binary", range=[[-ranx_cm, ranx_cm], [-rany_cm, rany_cm]])
            plt.axis("off")
            plt.margins(0, 0)

            # Savefig will not add padding
            plt.savefig(self.output_full_path, bbox_inches='tight', pad_inches=0)  



if __name__ == '__main__': 
    """
    Main function, user can introduce the input and output directories using the options -i & -o
    Will make POCA images in the output dir for all the Track.root files found.
    """

    parser = optparse.OptionParser(usage='usage: %prog [options] path', version='%prog 1.0')                           
    parser.add_option('-i', '--input', action='store', type='string', dest='inputDir', default='.', help='Input directory, contains TrackReconstructionFiles.root files')
    parser.add_option('-o', '--output', action='store', type='string', dest='outputDir', default='./output', help='Output directory for .png Poca graphs')
    (opts, args) = parser.parse_args()

    # Set the parameters for the POCA histograms
    histogram_params = {'px': 512, 'width_cm': 15, 'height_cm': 15, 'bins': 150}

    # Run the analysis
    action = FolderAnalyzer(opts.inputDir, opts.outputDir, histogram_params)
    action.make_analysis()

